from flask import Flask, request, jsonify
import mysql.connector as sql
import time
import random
import configparser
import os.path
import threading

application = Flask(__name__)


def slow_process_to_calculate_availability(provider, name):
    time.sleep(5)
    return random.choice(['HIGH', 'MEDIUM', 'LOW'])

def cache_and_insert(cache_file):
    # Create mysql connection from config file generated by terraform
    config = configparser.ConfigParser()
    config.read('mysql.conf')
    con = sql.connect(
      host=config['MYSQL']["host"],
      user=config['MYSQL']["user"],
      database=config['MYSQL']['db'],
      passwd=config['MYSQL']["passwd"]
    )
    c = con.cursor()
    statuses = [
        {
            'provider': row[1],
            'name': row[2],
            'availability': slow_process_to_calculate_availability(
                row[1],
                row[2]
            ),
        }
        for row in c.execute('SELECT * from hardware')
    ]
    con.close()
    # Write statuses cache file
    with open(cache_file, 'w') as f:
        f.write(statuses)
    return statuses

@application.route('/hardware/')
def hardware():
    # If cache file exists, return cached statuses and run long running
    # slow_process_to_calculate_availability function in thread.
    cache_file = 'statuses.json'
    if path.exists(cache_file):
        with open('statuses.json', 'r') as f:
        statuses = f.read()
        threading.Thread(target=cache_and_insert(cache_file)).start()
    else:
        statuses = cache_and_insert(cache_file)

    return jsonify(statuses)


if __name__ == "__main__":
    application.run(host='0.0.0.0', port=5001)
